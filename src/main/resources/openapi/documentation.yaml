openapi: "3.0.3"
info:
  title: "Ktor Encryption Server API"
  description: "The Rest API for the Ktor Encryption Server"
  version: "0.0.4"
  contact:
    name: Matthias Schenk
    email: inzuael@googlemail.com
    url: https://github.com/PoisonedYouth
servers:
  - url: "https://localhost:8080"
paths:
  /api/download:
    get:
      tags:
        - Upload File
      description: "Download an uploaded file."
      security:
        - basicAuth: [ ]
      responses:
        '200':
          description: "The file is downloaded successfully."
        '400':
          description: "The request body cannot be deserialized."
        '401':
          description: "The authentication failed for the user."
        '500':
          description: "Download of file failed (e.g. checksum changed)."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DownloadFile'

  /api/upload:
    delete:
      tags:
        - Upload File
      description: "Delete an upload file."
      security:
        - basicAuth: [ ]
      parameters:
        - in: query
          name: "encryptedfilename"
          example: "b0dd1936-65fc-462a-86a6-78edecc1ba19"
          required: true
      responses:
        '200':
          description: "The upload file is deleted successfully."
        '401':
          description: "The authentication failed for the user."
        '500':
          description: "Deletion of file failed (e.g. upload file not found on server)."
    get:
      tags:
        - Upload File
      description: "Download an upload file."
    post:
      tags:
        - Upload File
      description: "Upload file(s)."
  /api/upload/history:
    get:
      tags:
        - Upload File
      description: "Get current upload file history."
  /api/user:
    delete:
      tags:
        - User
      description: "Delete user from server."
    post:
      tags:
        - User
      description: "Create a new user."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/User'
      responses:
        '201':
          description: "The user is created successfully."
        '400':
          description: "The request body cannot be deserialized or the user with the username already exist v."
        '500':
          description: "Not able to create new user (e.g. the password does not fulfill the requirements)."
  /api/user/password:
    put:
      tags:
        - User
      description: "Update password for user."
      security:
        - basicAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/UpdatePassword'
      responses:
        '200':
          description: "The user password is updated successfully."
        '400':
          description: "The request body cannot be deserialized."
        '401':
          description: "The authentication failed for the user."
        '500':
          description: "Not able to update user password (e.g. new password does not fulfill the requirements)."
  /api/user/settings:
    put:
      tags:
        - User
      description: "Update settings for user."
      security:
        - basicAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSettings'
      responses:
        '200':
          description: "The user settings are updated successfully."
        '400':
          description: "The request body cannot be deserialized."
        '401':
          description: "The authentication failed for the user."
        '500':
          description: "Not able to update user settings (e.g. user not found)."
components:
  schemas:
    DownloadFile:
      type: object
      properties:
        filename:
          type: string
          description: "The filename of the upload file."
          example: "b0dd1936-65fc-462a-86a6-78edecc1ba19"
        password:
          type: string
          description: "The password for the upload file."
          example: "n¦¤¾t‰0₠DfKv(₾<A"
    UserSettings:
      type: object
      properties:
        uploadFileExpirationDays:
          type: integer
          description: "The amount of days "
          example: 14
    UpdatePassword:
      type: object
      properties:
        newPassword:
          type: string
          description: "The new password for the user."
          example: "n¦¤¾t‰0₠DfKv(₾<A"
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
security:
  - basicAuth: [ ]